#!/usr/bin/php
<?php

/** On récupère 
* les sorties
*/

$params = explode(' ', file_get_contents('php://stdin'));
$ref = trim($params[1]);
$diff = array();
$return = 0;

exec("git diff --name-only $params[0] $params[1] 2> /dev/null", $diff, $return);

$filename_pattern = '/\.php$/';
foreach ($diff as $file) {
    if (!preg_match($filename_pattern, $file)) {
        continue;
    }
    $tree = array();
    $return = 0;

/** on liste le contenue
* des fichier dans un tableau
*/
    exec("git ls-tree $ref $file 2> /dev/null", $tree, $return);
    if ($return > 0 || empty($tree)) {
        echo "Could not run git ls-tree\n\n";
        exit(1);
    }
    $tree = preg_split('/\s/', $tree[0]);
    $fileContents = array();
    exec("git cat-file $tree[1] $tree[2]  2> /dev/null", $fileContents, $return);
    if ($return > 0) {
        echo "Could not run git cat-file\n\n";
        exit(1);
    }
    $fileContents = implode("\n", $fileContents);
    $pipes = array();

 /** proc_open permet d'excécuter une commande, ici on exécute la commande
* 'php -l'
* de verifier la syntaxe du fichier en renvoyant les codes d'erreurs détectés
* dans un tableau pipe.
*/

    $proc = proc_open('php -l',
                  array(0 => array('pipe', 'r'),
                        1 => array('pipe', 'w')),
                $pipes);
    if (!is_resource($proc)) {
        echo "Could not creater php linter process\n\n";
        exit(1);
    }
    fwrite($pipes[0], $fileContents);
    fclose($pipes[0]);
    fclose($pipes[1]);
/** on ferme l'exécution avec 
* la commande proc_close
*/
    $resultCode = proc_close($proc);
    if ($resultCode != 0) {
        echo "Erreur dans le fichier '$file'\n\n";
        exit($resultCode);
    }
}
echo "No errors detected\n\n";
exit(0);